"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[2215],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return a?r.createElement(h,s(s({ref:t},u),{},{components:a})):r.createElement(h,s({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7648:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return p}});var r=a(3117),n=(a(7294),a(3905));const i={id:6502,title:6502,sidebar_position:1,description:6502},s="6502",o={unversionedId:"G-6502/6502",id:"G-6502/6502",title:"6502",description:"6502",source:"@site/docs/G-6502/6502.md",sourceDirName:"G-6502",slug:"/G-6502/6502",permalink:"/SPO600/G-6502/6502",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/G-6502/6502.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"6502",title:"6502",sidebar_position:1,description:"6502"},sidebar:"courseNotesSidebar",previous:{title:"SVE2",permalink:"/SPO600/H-ARM/sve2"},next:{title:"6502 Emulator",permalink:"/SPO600/G-6502/6502-emulator"}},l={},p=[{value:"Memory",id:"memory",level:2},{value:"Registers",id:"registers",level:2},{value:"Instruction Set",id:"instruction-set",level:2},{value:"6502 Emulator",id:"6502-emulator",level:2},{value:"Resources",id:"resources",level:2}],u={toc:p};function m(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"6502"},"6502"),(0,n.kt)("p",null,"The MOS Technologies 6502 processor was introduced in the mid-1970s to fill the need for a affordable general-purpose CPU. Its low cost (US$25 at introduction, less than C$0.89 now) was less than one-sixth of competing CPUs, and it had very simple circuitry requirements which made it simple and inexpensive to incorporate it into products. The 6502 (or a slight variation) was therefore used in many home and personal computers, such as the Apple II; the Commodore PET, Vic-20, and C64; the Atari 400 and 800; the BBC Micro; and games such as the Nintendo Entertainment System (NES), Atari 5200, and Atari 6200. A number of variations of this processor have been produced, using different semiconductor processes, integrated peripherals, instruction and data-width extensions, and pinouts. Several different versions are still in production for various embedded applications, and it remains a popular chip for homebrew system builders."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"MOS 6502 Processor",src:a(9988).Z,width:"726",height:"456"})),(0,n.kt)("p",null,"The MOS 6502 processor. Image credit: Christian Bassow - ",(0,n.kt)("a",{parentName:"p",href:"https://creativecommons.org/licenses/by-sa/4.0"},"CC-BY-SA 4.0")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Hex notation - $XX:")," In most 6502 documentation, including this page, the ",(0,n.kt)("inlineCode",{parentName:"p"},"$")," prefix indicates hexadecimal notation. On other systems, this may be designated by a ",(0,n.kt)("inlineCode",{parentName:"p"},"0x")," prefix."),(0,n.kt)("h2",{id:"memory"},"Memory"),(0,n.kt)("p",null,"The 6502 is an 8-bit processor with a 16-bit address bus. It is therefore able to access 64 kilobytes (",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("msup",{parentName:"mrow"},(0,n.kt)("mn",{parentName:"msup"},"2"),(0,n.kt)("mn",{parentName:"msup"},"16"))),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{2^{16}}")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,n.kt)("span",{parentName:"span",className:"mord"},(0,n.kt)("span",{parentName:"span",className:"mord"},(0,n.kt)("span",{parentName:"span",className:"mord"},"2"),(0,n.kt)("span",{parentName:"span",className:"msupsub"},(0,n.kt)("span",{parentName:"span",className:"vlist-t"},(0,n.kt)("span",{parentName:"span",className:"vlist-r"},(0,n.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,n.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,n.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,n.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,n.kt)("span",{parentName:"span",className:"mord mtight"},(0,n.kt)("span",{parentName:"span",className:"mord mtight"},"16"))))))))))))))," bytes). Since each 16-bit address is comprised of two 8-bit bytes, memory can be viewed as 256 pages of 256 bytes each."),(0,n.kt)("p",null,"Each pointer in memory is stored in two consecutive memory locations, with the lowest-value byte stored first; this is known as ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/endian#little-endian"},"Little Endian")," order. Thus, a pointer at memory location $0010, which points to memory location $ABCD, would be stored like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"}," Memory $0010: $CD\n Memory $0011: $AB\n")),(0,n.kt)("p",null,"Some pages have special, pre-defined purposes:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Page"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Starting address"),(0,n.kt)("th",{parentName:"tr",align:null},"Ending address"),(0,n.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"00"),(0,n.kt)("td",{parentName:"tr",align:null},"Zero Page"),(0,n.kt)("td",{parentName:"tr",align:null},"$0000"),(0,n.kt)("td",{parentName:"tr",align:null},"$00FF"),(0,n.kt)("td",{parentName:"tr",align:null},"Variables requiring fast access")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"01"),(0,n.kt)("td",{parentName:"tr",align:null},"Stack"),(0,n.kt)("td",{parentName:"tr",align:null},"$0100"),(0,n.kt)("td",{parentName:"tr",align:null},"$01FF"),(0,n.kt)("td",{parentName:"tr",align:null},"Values are pushed to, and pulled (popped) from, this region in first-in last-out (FILO) order. The stack descends as it is used - more recently-pushed values are stored at lower addresses than older values. The stack wraps around, so if more than 256 bytes are pushed, the oldest values will be overwritten.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"FF"),(0,n.kt)("td",{parentName:"tr",align:null},"Vector Table"),(0,n.kt)("td",{parentName:"tr",align:null},"$FF00"),(0,n.kt)("td",{parentName:"tr",align:null},"$FFFF"),(0,n.kt)("td",{parentName:"tr",align:null},"The last 6 bytes of this page contain three 2-byte addresses. $FE contains a pointer to code which is run when an interrupt request is received; $FC contains a pointer to code which is run when the CPU is reset (including when it is first started); and $FA contains a pointer to code which is run when a non-maskable interrupt (NMI) is received. (Note that the 6502 BRK instruction is counted as an NMI, and the B status flag can be used to determine if a hardware NMI or BRK instruction was received).")))),(0,n.kt)("p",null,"In addition, each system built using the 6502 would have hardware devices, such as the video system, keyboard, and communication interfaces, occupying a portion of the address space."),(0,n.kt)("h2",{id:"registers"},"Registers"),(0,n.kt)("p",null,"There are three general-purpose registers:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Accumulator (A) - the main register for math operations."),(0,n.kt)("li",{parentName:"ul"},"X Index (X) - a register which can be used for limited math operations as well as indexed addressing modes, where an index value is added to a base address for memory operations."),(0,n.kt)("li",{parentName:"ul"},"Y Index (Y) - a register similar to the X register. Some index operations may only be performed with a specific index register (X or Y, but not interchangeably).")),(0,n.kt)("p",null,"There are also three special-purpose registers:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Program Counter (PC) - a pointer to the currently-executing instruction in memory."),(0,n.kt)("li",{parentName:"ul"},"Stack Pointer (S or SP) - a pointer to the current position in the stack"),(0,n.kt)("li",{parentName:"ul"},"Processor Status (P or PS) - a collection of bits (flags) which indicate or control aspects of the processor mode and status:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"C - Carry - Used to carry or borrow during addition and subtraction operations. If set (=1) at the start of an add-with-carry (ADC) operation, an additional 1 will be added to the result; if cleared (=0) at the start of a subtract-with-carry instruction (SBC), an additional 1 will be subtracted from the result. This flag will be set or cleared to indicate if an (unsigned) addition overflowed (result ",">"," 255) or the (unsigned) subtraction underflowed (result < 0)"),(0,n.kt)("li",{parentName:"ul"},"Z - Zero flag - indicates that an operation produced a zero result. Since comparison instructions (CMP, CPX, CPY for comparisions involving the A, X, or Y registers respectively) are actually subtractions, comparing two equal numbers by subtraction will result in a zero value, setting this flag."),(0,n.kt)("li",{parentName:"ul"},"I - Interrupt disable"),(0,n.kt)("li",{parentName:"ul"},"D - Decimal mode - bytes are interpreted as two-digit decimal values instead of 8-bit binary values when doing math"),(0,n.kt)("li",{parentName:"ul"},"B - Break - Indicates a software interrupt (BRK instruction) has caused a non-maskable interrupt (NMI), rather than a hardware NMI."),(0,n.kt)("li",{parentName:"ul"},"V - Overflow - Set when a math operation overflows (result ",">"," 127) or underflows (result < -128) a one-byte signed result"),(0,n.kt)("li",{parentName:"ul"},"N - Negative Sign - set when an operation produces a negative result (bit 7 is set in the result)")))),(0,n.kt)("h2",{id:"instruction-set"},"Instruction Set"),(0,n.kt)("p",null,"The 6502 instruction set consist of a number of single-byte ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/opcode"},"opcodes"),", each of which is followed by 0, 1, or 2 bytes of arguments. Each opcode corresponded to an ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/instruction"},"instruction"),", which consists of an ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/operation"},"operation")," and an ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/addressing-mode"},"addressing mode"),". 6502 ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/F-AssemblyLanguage/assembly-language"},"Assembly Language")," uses 3-letter menomics to specify the operation, and argument syntax to specify the addressing mode. For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"}," LDA #$05  ; load the accumulator with the number 5\n LDA $05   ; load the accumulator with the contents of memory location $05 in the zero page ($0005)\n LDA $f005 ; load the accumulator with the contents of memory location $f005\n")),(0,n.kt)("p",null,"See the references (below) for the full details of the 6502 instruction set."),(0,n.kt)("h2",{id:"6502-emulator"},"6502 Emulator"),(0,n.kt)("p",null,"Since 6502 systems are no longer very common, a web-based ",(0,n.kt)("a",{parentName:"p",href:"/SPO600/G-6502/6502-emulator"},"6502 Emulator")," is available for assembling, testing, and debugging 6502 Assembly code."),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://6502.cdot.systems/"},"6502.cdot.systems"),", the 6502 emulator we use in this course"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/MOS_Technology_6502"},"Wikipedia entry for 6502")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://6502.org/"},"6502.org")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://www.visual6502.org/"},"Visual 6502")," - a project to physically disassemble and analyze the 6502 chip, including photographs of the chip die and a visual simulation of voltages on the chip"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://skilldrick.github.io/easy6502/"},"Easy 6502")," (tutorial using an earlier version of the 6502 emulator we use in this course)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"http://www.6502.org/tutorials/6502opcodes.html"},"6502 Opcodes with Register Definitions")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.masswerk.at/6502/6502_instruction_set.html"},"6502 Opcodes with Detailed Operation Information")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://monster6502.com/"},"MOnSter 6502")," - a large-scale, transistor-level implementation of the 6502, with lots of LEDs!")))}m.isMDXComponent=!0},9988:function(e,t,a){t.Z=a.p+"assets/images/MOS_6502_1-cbbcddfd8fe2a8df9b8949c3d1a4ee42.jpg"}}]);