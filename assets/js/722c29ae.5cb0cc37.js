"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[7163],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=s.createContext({}),m=function(e){var t=s.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return s.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=m(n),p=a,d=g["".concat(o,".").concat(p)]||g[p]||c[p]||r;return n?s.createElement(d,l(l({ref:t},u),{},{components:n})):s.createElement(d,l({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var m=2;m<r;m++)l[m]=n[m];return s.createElement.apply(null,l)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},860:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return m}});var s=n(3117),a=(n(7294),n(3905));const r={id:"assembly-language",title:"Assembly Language",sidebar_position:1,description:"Assembly Language"},l="Assembly Language",i={unversionedId:"F-AssemblyLanguage/assembly-language",id:"F-AssemblyLanguage/assembly-language",title:"Assembly Language",description:"Assembly Language",source:"@site/docs/F-AssemblyLanguage/assembly-language.md",sourceDirName:"F-AssemblyLanguage",slug:"/F-AssemblyLanguage/assembly-language",permalink:"/SPO600/F-AssemblyLanguage/assembly-language",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/F-AssemblyLanguage/assembly-language.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"assembly-language",title:"Assembly Language",sidebar_position:1,description:"Assembly Language"},sidebar:"courseNotesSidebar",previous:{title:"Topic File 1",permalink:"/SPO600/E-ComputerArchitecture/topic-file-1"},next:{title:"Assembler Basics",permalink:"/SPO600/F-AssemblyLanguage/assembler-basics"}},o={},m=[{value:"Examples",id:"examples",level:2},{value:"x86",id:"x86",level:3},{value:"ARM (32-bit)",id:"arm-32-bit",level:3},{value:"ARM (64-bit) - AArch64",id:"arm-64-bit---aarch64",level:3},{value:"6502",id:"6502",level:3},{value:"Resources",id:"resources",level:2}],u={toc:m};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"assembly-language"},"Assembly Language"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Assembly language")," is a ",(0,a.kt)("a",{parentName:"p",href:"/SPO600/F-AssemblyLanguage/symbol"},"symbolic")," representation of machine language (ADD LINK). It is therefore very architecture-specific (ADD LINK)."),(0,a.kt)("p",null,'Each instruction is represented by a short mnemonic word such as "LDR" for ',(0,a.kt)("em",{parentName:"p"},"Load Register"),', "MOV" for ',(0,a.kt)("em",{parentName:"p"},"move"),', or "MUL" for ',(0,a.kt)("em",{parentName:"p"},"multiply"),", followed by (optional) arguments. The addressing mode (ADD LINK) is implied by the format of the arguments. Different assemblers (ADD LINK) use slightly different syntax."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"x86"},"x86"),(0,a.kt)("p",null,'Here is a "Hello, World!" program written for an x86_64 Linux system using the ',(0,a.kt)("a",{parentName:"p",href:"https://sourceware.org/binutils/docs/as/"},"GNU Assembler (gas/as)")," syntax (which is the main assembler used in open source projects such as the Linux kernel, as well as the ",(0,a.kt)("a",{parentName:"p",href:"/SPO600/"},"SPO600")," course), using Linux ",(0,a.kt)("a",{parentName:"p",href:"/SPO600/F-AssemblyLanguage/syscalls"},"Syscalls"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},'.text\n.globl _start\n_start:\n    mov $len, %edx     /* file descriptor: 1 is stdout */ \n    mov $msg, %ecx     /* message location (memory address) */\n    mov $1, %ebx       /* message length (bytes) */\n    mov $4, %eax       /* write is syscall #4 */\n    int $0x80          /* invoke syscall */\n\n    mov $0, %ebx       /* exit status: 0 (good) */\n    mov $1, %eax       /* kernel syscall number: 1 is sys_exit */\n    int $0x80          /* invoke syscall */\n\n.data\nmsg:\n    .ascii "Hello, World!\\n"\n    len = . - msg\n')),(0,a.kt)("p",null,"Here is a similar program for a 32-bit x86 system using the ",(0,a.kt)("a",{parentName:"p",href:"http://www.nasm.us/xdoc/2.11/html/nasmdoc1.html#section-1.1"},"Nasm")," syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},"section    .text\nglobal    _start\n\n_start:\n    mov    edx,len          ; message length (bytes)\n    mov    ecx,msg          ; message location (memory address)\n    mov    ebx,1            ; file descriptor: 1 is stdout\n    mov    eax,4            ; kernel syscall number: 4 is sys_write\n    int    0x80             ; invoke syscall\n\n    mov    ebx,0            ; exit status: 0 (good)\n    mov    eax,1            ; kernel syscall number: 1 is sys_exit\n    int    0x80             ; invoke syscall\n\nsection    .rodata\n\nmsg    db    'Hello, world!\\n'\nlen    equ    $ - msg\n")),(0,a.kt)("p",null,"Notice that the order of the arguments in some lines is reversed between the two assemblers, and the prefixes to symbols and values also change."),(0,a.kt)("h3",{id:"arm-32-bit"},"ARM (32-bit)"),(0,a.kt)("p",null,"This is written in ",(0,a.kt)("a",{parentName:"p",href:"https://sourceware.org/binutils/docs/as/"},"GNU Assembler (gas/as)")," syntax using Linux ",(0,a.kt)("a",{parentName:"p",href:"/SPO600/F-AssemblyLanguage/syscalls"},"Syscalls"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},'.text\n.globl _start\n_start:\n\n     mov     %r0, $1     /* file descriptor: 1 is stdout */\n     ldr     %r1, =msg   /* message location (memory address) */\n     ldr     %r2, =len   /* message length (bytes) */\n     mov     %r7, $4     /* write is syscall #4 */\n     swi     $0          /* invoke syscall */\n\n     mov     %r0, $0     /* exit status: 0 (good) */\n     mov     %r7, $1     /* kernel syscall number: 1 is sys_exit */\n     swi     $0          /* invoke syscall */\n\n.data\nmsg:\n     .ascii      "Hello, world!\\n"\n     len = . - msg\n')),(0,a.kt)("h3",{id:"arm-64-bit---aarch64"},"ARM (64-bit) - AArch64"),(0,a.kt)("p",null,"This is also in ",(0,a.kt)("a",{parentName:"p",href:"https://sourceware.org/binutils/docs/as/"},"GNU Assembler (gas/as)")," syntax using Linux ",(0,a.kt)("a",{parentName:"p",href:"/SPO600/F-AssemblyLanguage/syscalls"},"Syscalls"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},'.text\n.globl _start\n_start:\n\n    mov     x0, 1           /* file descriptor: 1 is stdout */\n    adr     x1, msg     /* message location (memory address) */\n    mov     x2, len     /* message length (bytes) */\n \n    mov     x8, 64      /* write is syscall #64 */\n    svc     0           /* invoke syscall */\n\n    mov     x0, 0       /* status -> 0 */\n    mov     x8, 93      /* exit is syscall #93 */\n    svc     0           /* invoke syscall */\n\n.data\nmsg:    .ascii      "Hello, world!\\n"\nlen=    . - msg\n')),(0,a.kt)("h3",{id:"6502"},"6502"),(0,a.kt)("p",null,'Here is the same "Hello World" program in 6502 (ADD LINK) assembler as used in the 6502 Emulator (ADD LINK), using the ROM routines (ADD LINK) for output:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},'define SCINIT $ff81 ; initialize/clear screen\ndefine CHROUT $ffd2 ; output character to screen\n\n    JSR SCINIT  ; clear screen\n    LDY #$00    ; set Y index to zero\n\nloop:   LDA msg,Y   ; get a character\n    BEQ done    ; quit if character is null\n    JSR CHROUT  ; output the character\n    INY     ; increment index\n    JMP loop    ; get next character\n\ndone:   BRK     ; break (stop program)\n\nmsg:    \n    DCB "H","e","l","l","o",$2C,$20\n    DCB "W","o","r","l","d","!",$0d, $00\n')),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/SPO600/F-AssemblyLanguage/assembler-basics"},"Assembler Basics")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://leto.net/code/asm/hw_assembler.php"},'"Hello World" in many different types of assembler')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/SPO600/F-AssemblyLanguage/x86-64-register-and-instruction-quick-start"},"x86_64 Register and Instruction Quick Start")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/SPO600/F-AssemblyLanguage/aarch64-register-and-instruction-quick-start"},"aarch64 Register and Instruction Quick Start"))))}c.isMDXComponent=!0}}]);