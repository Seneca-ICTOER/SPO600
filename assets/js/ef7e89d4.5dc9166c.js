"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[3389],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(r),f=o,d=m["".concat(p,".").concat(f)]||m[f]||s[f]||i;return r?n.createElement(d,a(a({ref:t},u),{},{components:r})):n.createElement(d,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1749:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l}});var n=r(3117),o=(r(7294),r(3905));const i={id:"atomic-operation",title:"Atomic Operation",sidebar_position:5,description:"Atomic Operation"},a="Atomic Operation",c={unversionedId:"E-ComputerArchitecture/atomic-operation",id:"E-ComputerArchitecture/atomic-operation",title:"Atomic Operation",description:"Atomic Operation",source:"@site/docs/E-ComputerArchitecture/atomic-operation.md",sourceDirName:"E-ComputerArchitecture",slug:"/E-ComputerArchitecture/atomic-operation",permalink:"/SPO600/E-ComputerArchitecture/atomic-operation",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/E-ComputerArchitecture/atomic-operation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"atomic-operation",title:"Atomic Operation",sidebar_position:5,description:"Atomic Operation"},sidebar:"courseNotesSidebar",previous:{title:"Assembler",permalink:"/SPO600/E-ComputerArchitecture/assembler"},next:{title:"BCD",permalink:"/SPO600/E-ComputerArchitecture/bcd"}},p={},l=[],u={toc:l};function s(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"atomic-operation"},"Atomic Operation"),(0,o.kt)("p",null,"An ",(0,o.kt)("em",{parentName:"p"},"atomic operation")," is one that cannot be interrupted. These operations are typically used for acquiring locks."),(0,o.kt)("p",null,'Consider the following code, intended to set a "lock" in shared memory so that only one thread or process performs a particular action at a time:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"if (lock == 0) {\n  lock++;\n  /* Perform exclusive action */\n  lock--;\n} else {\n  abort();\n}\n")),(0,o.kt)("p",null,"If another process or thread writes to the lock variable between the lock comparison (lock == 0) and setting the lock (lock++), then the lock could fail to ensure exclusive action."),(0,o.kt)("p",null,"There are two ways to accomplish an atomic operation:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use a single machine instruction."),(0,o.kt)("li",{parentName:"ol"},"Tell the operating system in advance not to interrupt the operation.")),(0,o.kt)("p",null,"GCC provides ",(0,o.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/compiler-intrinsics"},"intrinsics")," for some atomic operations."),(0,o.kt)("p",null,"(Note that in the above example, even the ",(0,o.kt)("inlineCode",{parentName:"p"},"lock++"),' statement may not be atomic - it will typically compile into the three-operation sequence "load-increment-store", and its possible that two processes or threads could each perform this operation in an interleaved fashion and increment ',(0,o.kt)("inlineCode",{parentName:"p"},"lock")," by just one instead of two)."))}s.isMDXComponent=!0}}]);