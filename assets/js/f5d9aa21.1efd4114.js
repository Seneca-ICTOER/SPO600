"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[916],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=u(t),f=o,d=m["".concat(c,".").concat(f)]||m[f]||s[f]||a;return t?r.createElement(d,i(i({ref:n},l),{},{components:t})):r.createElement(d,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},222:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var r=t(3117),o=(t(7294),t(3905));const a={id:"6502-counting-loop-example",title:"6502 Counting Loop Example",sidebar_position:7,description:"6502 Counting Loop Example"},i="6502 Counting Loop Example",p={unversionedId:"G-6502/6502-counting-loop-example",id:"G-6502/6502-counting-loop-example",title:"6502 Counting Loop Example",description:"6502 Counting Loop Example",source:"@site/docs/G-6502/6502-counting-loop-example.md",sourceDirName:"G-6502",slug:"/G-6502/6502-counting-loop-example",permalink:"/SPO600/G-6502/6502-counting-loop-example",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/G-6502/6502-counting-loop-example.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"6502-counting-loop-example",title:"6502 Counting Loop Example",sidebar_position:7,description:"6502 Counting Loop Example"},sidebar:"courseNotesSidebar",previous:{title:"6502 Jumps, Branches, and Procedures",permalink:"/SPO600/G-6502/6502-jumps-branches-and-procedures"},next:{title:"6502 Emulator Example Code",permalink:"/SPO600/G-6502/6502-emulator-example-code"}},c={},u=[],l={toc:u};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"6502-counting-loop-example"},"6502 Counting Loop Example"),(0,o.kt)("p",null,"Here is a solution for part of the ",(0,o.kt)("a",{parentName:"p",href:"/SPO600/B-Labs/lab4"},"SPO600 64-bit Assembly Language Lab")," but implemented in 6502 Assembly language for use with the ",(0,o.kt)("a",{parentName:"p",href:"/SPO600/G-6502/6502-emulator"},"6502 Emulator"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-assembly"},'; ROM routines\ndefine      SCINIT      $ff81\ndefine      CHROUT      $ffd2\n\nSTART:\n    LDX #$00    ; Loop index (0-9)\n\nGO:\n    TXA     ; Put loop index into A\n    CLC\n    ADC #$30    ; Add $30 (ASCII \'0\')\n    STA MSG_DIGIT   ; Store into the string\n\n    LDY #$00    ; Character number to print\nDO:\n    LDA MSG,Y   ; Get a character\n    BEQ DONE    ; Done if it\'s NULL\n    JSR CHROUT  ; Print character\n    INY     ; Increment char number\n    JMP DO      ; Process next character\n\nDONE:\n    INX     ; Increment loop index\n    CPX #10     ; Is it 10?\n    BNE GO      ; If not, branch to GO\n    BRK     ; Stop\n\nMSG:\n    DCB "L","o","o","p",$20\nMSG_DIGIT:\n    DCB "#",$0D,$00\n\n; Note that MSG_DIGIT is a position in\n; the middle of the message - not a \n; separate message.\n')))}s.isMDXComponent=!0}}]);