"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[3709],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2127:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var r=n(3117),i=(n(7294),n(3905));const a={id:"endian",title:"Endian",sidebar_position:13,description:"Endian"},o="Endian",s={unversionedId:"E-ComputerArchitecture/endian",id:"E-ComputerArchitecture/endian",title:"Endian",description:"Endian",source:"@site/docs/E-ComputerArchitecture/endian.md",sourceDirName:"E-ComputerArchitecture",slug:"/E-ComputerArchitecture/endian",permalink:"/SPO600/E-ComputerArchitecture/endian",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/E-ComputerArchitecture/endian.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{id:"endian",title:"Endian",sidebar_position:13,description:"Endian"},sidebar:"courseNotesSidebar",previous:{title:"Disassembler",permalink:"/SPO600/E-ComputerArchitecture/disassembler"},next:{title:"Expensive",permalink:"/SPO600/E-ComputerArchitecture/expensive"}},l={},c=[{value:"Little-Endian",id:"little-endian",level:2},{value:"Big-Endian",id:"big-endian",level:2},{value:"Bi-endian",id:"bi-endian",level:2},{value:"Other Memory Sequences",id:"other-memory-sequences",level:2},{value:"Significance of Byte Order",id:"significance-of-byte-order",level:2},{value:"Origin of the Terms",id:"origin-of-the-terms",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"endian"},"Endian"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Endian"),"-ism of a processor refers to the order in which multi-byte values are stored in memory."),(0,i.kt)("h2",{id:"little-endian"},"Little-Endian"),(0,i.kt)("p",null,"Little-endian systems store the least-significant byte of a multi-byte value at the lowest address."),(0,i.kt)("p",null,"For example, on 6502 systems (with a 8 bit/1 byte word size), the 16-bit value $FFEE stored at address $1000 would be stored like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-assembly"},"$1000 $EE\n$1001 $FF\n")),(0,i.kt)("p",null,"Likewise, on an x86_64 system, the 64-bit value 0xFFEEDDCCBBAA9988 would be stored at memory location 0x1000 like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-assembly"},"0x1000 0x88\n0x1001 0x99\n0x1002 0xAA\n0x1003 0xBB\n0x1004 0xCC\n0x1005 0xDD\n0x1006 0xEE\n0x1007 0xFF\n")),(0,i.kt)("h2",{id:"big-endian"},"Big-Endian"),(0,i.kt)("p",null,"Big-endian systems store multi-byte values with the most significant byte at the lowest address."),(0,i.kt)("p",null,"For example, on a Motorola 68030 CPU, the value 0xFFEEDDCC would be written at memory location 0x1000 as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-assembly"},"0x1000 0xFF\n0x1001 0xEE\n0x1002 0xDD\n0x1003 0xCC\n")),(0,i.kt)("h2",{id:"bi-endian"},"Bi-endian"),(0,i.kt)("p",null,"Bi-endian CPUs can store data in either format (though sometimes not instructions). ARM ",(0,i.kt)("a",{parentName:"p",href:"/SPO600/H-ARM/armv8"},"AArch32")," and ",(0,i.kt)("a",{parentName:"p",href:"/SPO600/H-ARM/armv8"},"AArch64")," systems, PowerPC, Alpha, recent SPARC, MIPS, and Itanium systems are bi-endian."),(0,i.kt)("h2",{id:"other-memory-sequences"},"Other Memory Sequences"),(0,i.kt)("p",null,"There are a few, rare architectures which store values in a sequence other than strict little-endian or big-endian format. For example, the 32-bit value FFEEDDCCh would be stored by a PDP-11 at address 1000h in this manner:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-assembly"},"1000h EEh\n1001h FFh\n1002h CCh\n1003h DDh\n")),(0,i.kt)("p",null,"That is, each 16-bit word is stored in little-endian format, but the two 16-bit words are in big-endian sequence."),(0,i.kt)("h2",{id:"significance-of-byte-order"},"Significance of Byte Order"),(0,i.kt)("p",null,'Byte order can introduce ambiguity and complexity when transferring binary data between dissimilar systems; in network protocols and file specifications, it is critical to specify the order of multi-byte values. Some platform-independent remote procedure call (RPC) systems provide functions to ensure that data is always represented "on the wire" in a particular byte order.'),(0,i.kt)("p",null,"Byte order can be significant for performance in some contexts. The 6502 processor, for example, loads the byte following an ",(0,i.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/opcode"},"opcode")," in memory while the opcode is being decoded. Due to little-endian encoding, this byte can be safely assumed to represent bit positions 0-7 regardless of whether the opcode's argument is 1 byte or 2 bytes; if big-endian encoding was used, the first byte read after the opcode might have to be shifted to bit positions 8-15 in the case of a 2-byte argument."),(0,i.kt)("p",null,"Binary fields in internet protocol (IP) packets are in big-endian order. For this reason, the processors on many routers and other high-speed network devices are big-endian (e.g., MIPS) or run in big-endian order (ARM)."),(0,i.kt)("h2",{id:"origin-of-the-terms"},"Origin of the Terms"),(0,i.kt)("p",null,"The terms Big-Endian and Little-Endian originally appeared in the classic satirical tale ",(0,i.kt)("a",{parentName:"p",href:"https://www.gutenberg.org/files/829/829-h/829-h.htm"},"Gulliver's Travels")," by Jonathan Swift, where they referred to which end of a boiled egg was to be opened first -- a distinction which led to ongoing conflict between small-minded people."))}u.isMDXComponent=!0}}]);