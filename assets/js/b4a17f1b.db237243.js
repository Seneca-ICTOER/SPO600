"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[9609],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||a;return r?n.createElement(f,c(c({ref:t},p),{},{components:r})):n.createElement(f,c({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2734:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return l},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u}});var n=r(3117),o=(r(7294),r(3905));const a={id:"stack",title:"Stack",sidebar_position:28,description:"Stack"},c="Stack",i={unversionedId:"E-ComputerArchitecture/stack",id:"E-ComputerArchitecture/stack",title:"Stack",description:"Stack",source:"@site/docs/E-ComputerArchitecture/stack.md",sourceDirName:"E-ComputerArchitecture",slug:"/E-ComputerArchitecture/stack",permalink:"/SPO600/E-ComputerArchitecture/stack",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/E-ComputerArchitecture/stack.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{id:"stack",title:"Stack",sidebar_position:28,description:"Stack"},sidebar:"courseNotesSidebar",previous:{title:"Signed",permalink:"/SPO600/E-ComputerArchitecture/signed"},next:{title:"Truth Table",permalink:"/SPO600/E-ComputerArchitecture/truth-table"}},s={},u=[],p={toc:u};function l(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"stack"},"Stack"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"stack")," is an area of memory where values are added (pushed) or removed (pulled) to/from the end of the stack only. Most CPU designs incorporate one or more hardware-managed stacks which are used to store and restore state information during subroutine calls, exceptions, and interrupts."),(0,o.kt)("p",null,"On some architectures, the stack grows downward in memory; in others, it grows upward. Hardware stacks are implemented through the use of a ",(0,o.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/register#stack-pointer"},"stack pointer")," register, which is used for indirect read/writes, with the stack pointer automatically incremented or decremented on each access."),(0,o.kt)("p",null,"In a few historical cases (e.g., old Intel 4004 and 8008 processors) the stack was implemented in registers internal to the CPU rather than in general address space."))}l.isMDXComponent=!0}}]);