"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[2237],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return b}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),f=l(r),b=o,m=f["".concat(c,".").concat(b)]||f[b]||s[b]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5490:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return a},default:function(){return s},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var n=r(3117),o=(r(7294),r(3905));const i={id:"truth-table",title:"Truth Table",sidebar_position:29,description:"Truth Table"},a="Truth Table",u={unversionedId:"E-ComputerArchitecture/truth-table",id:"E-ComputerArchitecture/truth-table",title:"Truth Table",description:"Truth Table",source:"@site/docs/E-ComputerArchitecture/truth-table.md",sourceDirName:"E-ComputerArchitecture",slug:"/E-ComputerArchitecture/truth-table",permalink:"/SPO600/E-ComputerArchitecture/truth-table",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/E-ComputerArchitecture/truth-table.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{id:"truth-table",title:"Truth Table",sidebar_position:29,description:"Truth Table"},sidebar:"courseNotesSidebar",previous:{title:"Stack",permalink:"/SPO600/E-ComputerArchitecture/stack"},next:{title:"Volatile",permalink:"/SPO600/E-ComputerArchitecture/volatile"}},c={},l=[],p={toc:l};function s(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"truth-table"},"Truth Table"),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"Truth Table")," is a table which has columns for the inputs and outputs of a logical binary operation, and rows representing all possible inputs and the corresponding outputs."),(0,o.kt)("p",null,"For some examples, see ",(0,o.kt)("a",{parentName:"p",href:"/SPO600/E-ComputerArchitecture/bitwise-operations"},"Bitwise Operations"),"."))}s.isMDXComponent=!0}}]);