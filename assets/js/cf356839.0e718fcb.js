"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[591],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8387:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return p}});var o=n(3117),a=(n(7294),n(3905));const r={id:"lab4",title:"Lab 4",sidebar_position:4,description:"Lab 4 for Students to Complete and Submit"},i="64-bit Assembly Language Lab 4",l={unversionedId:"B-Labs/lab4",id:"B-Labs/lab4",title:"Lab 4",description:"Lab 4 for Students to Complete and Submit",source:"@site/docs/B-Labs/lab4.md",sourceDirName:"B-Labs",slug:"/B-Labs/lab4",permalink:"/SPO600/B-Labs/lab4",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/B-Labs/lab4.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"lab4",title:"Lab 4",sidebar_position:4,description:"Lab 4 for Students to Complete and Submit"},sidebar:"courseNotesSidebar",previous:{title:"Lab 3",permalink:"/SPO600/B-Labs/lab3"},next:{title:"Lab 5",permalink:"/SPO600/B-Labs/lab5"}},s={},p=[{value:"Purpose of this Lab",id:"purpose-of-this-lab",level:2},{value:"SPO600 Servers",id:"spo600-servers",level:2},{value:"Lab Instructions",id:"lab-instructions",level:2},{value:"Code Examples",id:"code-examples",level:3},{value:"Resources",id:"resources",level:3},{value:"Optional Investigation",id:"optional-investigation",level:3},{value:"Lab Tasks",id:"lab-tasks",level:3},{value:"Deliverables",id:"deliverables",level:3},{value:"Optional Challenge",id:"optional-challenge",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"64-bit-assembly-language-lab-4"},"64-bit Assembly Language Lab 4"),(0,a.kt)("h2",{id:"purpose-of-this-lab"},"Purpose of this Lab"),(0,a.kt)("p",null,"In this lab, you will experiment with assembler on the x86_64 and aarch64 platforms."),(0,a.kt)("h2",{id:"spo600-servers"},"SPO600 Servers"),(0,a.kt)("p",null,"Perform this lab on SPO600 Servers (ADD LINK) (you may use your own systems if they are of the right architecture and appropriately configured)."),(0,a.kt)("h2",{id:"lab-instructions"},"Lab Instructions"),(0,a.kt)("h3",{id:"code-examples"},"Code Examples"),(0,a.kt)("p",null,"The code examples for this lab are available in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"/public/spo600-assembler-lab-examples.tgz")," on each of the SPO600 Servers (ADD LINK)."),(0,a.kt)("p",null,"Unpacking the archive in your home directory will produce the following directory structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'spo600\n\u2514\u2500\u2500 examples\n    \u2514\u2500\u2500 hello                     # "hello world" example programs\n        \u251c\u2500\u2500 assembler\n        \u2502   \u251c\u2500\u2500 aarch64           # aarch64 gas assembly language version\n        \u2502   \u2502   \u251c\u2500\u2500 hello.s\n        \u2502   \u2502   \u2514\u2500\u2500 Makefile\n        \u2502   \u251c\u2500\u2500 Makefile\n        \u2502   \u2514\u2500\u2500 x86_64            # x86_64 assembly language versions\n        \u2502       \u251c\u2500\u2500 hello-gas.s   # ... gas syntax\n        \u2502       \u251c\u2500\u2500 hello-nasm.s  # ... nasm syntax\n        \u2502       \u2514\u2500\u2500 Makefile\n        \u2514\u2500\u2500 c                     # Portable C versions\n            \u251c\u2500\u2500 hello2.c          # ... using write()\n            \u251c\u2500\u2500 hello3.c          # ... using syscall()\n            \u251c\u2500\u2500 hello.c           # ... using printf()\n            \u2514\u2500\u2500 Makefile\n')),(0,a.kt)("p",null,"Throughout this lab, take advantage of make (ADD LINK) whenever possible."),(0,a.kt)("h3",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Assembler Basics (ADD LINK) (includes instructions on how to use the GNU Assembler)"),(0,a.kt)("li",{parentName:"ul"},"Syscalls (ADD LINK)"),(0,a.kt)("li",{parentName:"ul"},"x86_64 Register and Instruction Quick Start (ADD LINK)"),(0,a.kt)("li",{parentName:"ul"},"aarch64 Register and Instruction Quick Start (ADD LINK)")),(0,a.kt)("h3",{id:"optional-investigation"},"Optional Investigation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Build and run the three C versions of the program for x86_64 and aarch64, using ",(0,a.kt)("inlineCode",{parentName:"li"},"make"),". Take a look at the differences in the code."),(0,a.kt)("li",{parentName:"ol"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"objdump -d")," command to dump (print) the object code (machine code) and disassemble it into assembler for each of the binaries. Find the ",(0,a.kt)("inlineCode",{parentName:"li"},"<main>")," section and take a look at the code. Also notice the total amount of code."),(0,a.kt)("li",{parentName:"ol"},"Review, build, and run the x86_64 assembly language programs using ",(0,a.kt)("inlineCode",{parentName:"li"},"make"),", taking note of the commands that are executed to assemble and link the code. Take a look at the code using ",(0,a.kt)("inlineCode",{parentName:"li"},"objdump -d objectfile")," and compare it to the source code. Notice the absence of other code (compared to the C binary, which had a lot of extra code)."),(0,a.kt)("li",{parentName:"ol"},"Build and run the assembly language version of the program for aarch64 using ",(0,a.kt)("inlineCode",{parentName:"li"},"make"),", taking note of the commands that are executed to assemble and link the code. Verify that you can disassemble the object code in the ELF binary using ",(0,a.kt)("inlineCode",{parentName:"li"},"objdump -d objectfile")," and take a look at the code.")),(0,a.kt)("h3",{id:"lab-tasks"},"Lab Tasks"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Review, build, and run the aarch64 assembly language programs. Take a look at the code using ",(0,a.kt)("inlineCode",{parentName:"li"},"objdump -d objectfile")," and compare it to the source code."),(0,a.kt)("li",{parentName:"ol"},"Here is a basic loop in AArch64 assembler - this loops from 0 to 9, using r19 as the index (loop control) counter:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},".text\n.globl _start\n\nmin = 0                          /* starting value for the loop index; note that this is a symbol (constant), not a variable */\nmax = 10                         /* loop exits when the index hits this number (loop condition is i<max) */\n\n_start:\n\n    mov     x19, min\n\nloop:\n\n    /* ... body of the loop ... do something useful here ... */\n\n    add     x19, x19, 1\n    cmp     x19, max\n    b.ne    loop\n\n    mov     x0, 0           /* status -> 0 */\n    mov     x8, 93          /* exit is syscall #93 */\n    svc     0               /* invoke syscall */\n")),(0,a.kt)("p",null,'This code doesn\'t actually do anything while looping, because the body of the loop is empty. On an AArch64 machine, combine this code with code from the "Hello World" assembley-language example, so that it prints a word each time it loops:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Loop\nLoop\nLoop\nLoop\nLoop\nLoop\nLoop\nLoop\nLoop\nLoop\n")),(0,a.kt)("p",null,"Then modify the message so that it includes the loop index values, showing each digit from 0 to 9 like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Loop: 0\nLoop: 1\nLoop: 2\nLoop: 3\nLoop: 4\nLoop: 5\nLoop: 6\nLoop: 7\nLoop: 8\nLoop: 9\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Character conversion")),(0,a.kt)("p",null,"In order to print the loop index value, you will need to convert from an integer to digit character. In ASCII/ISO-8859-1/Unicode UTF-8, the digit characters are in the range 48-57 (0x30-0x39). You will also need to assemble the message to be printed for each line - you can do this by writing the digit into the message buffer before outputting it to stdout, which is probably the best approach, or you can perform a sequence of writes for the thee parts of the message ('Loop: ', number, '\\n'). You may want to refer to the manpage for ",(0,a.kt)("inlineCode",{parentName:"p"},"ascii"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"6502 Implementation:")," For reference, here is a 6502 implementation of this loop (ADD LINK)."),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Repeat the previous step for x86_64.")),(0,a.kt)("p",null,"For reference, here is the loop code in x86_64 assembler:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"},".text\n.globl    _start\n\nmin = 0                         /* starting value for the loop index; note that this is a symbol (constant), not a variable */\nmax = 10                        /* loop exits when the index hits this number (loop condition is i<max) */\n\n_start:\n    mov     $min,%r15           /* loop index */\n\nloop:\n    /* ... body of the loop ... do something useful here ... */\n\n    inc     %r15                /* increment index */\n    cmp     $max,%r15           /* see if we're done */\n    jne     loop                /* loop if we're not */\n\n    mov     $0,%rdi             /* exit status */\n    mov     $60,%rax            /* syscall sys_exit */\n    syscall\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Extend the AArch64 code to loop from 00-30, printing each value as a 2-digit decimal number.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2-Digit Conversion")),(0,a.kt)("p",null,"You will need to take the loop index and convert it to a 2-digit decimal number by dividing by 10. Read the description of the division instruction carefully. On x86_64, you need to set up specific registers before performing a division. On AArch64, you will need to use a second instruction to find the remainder after a division."),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Change the code as needed to suppress the leading zero (printing 0-30 instead of 00-30)."),(0,a.kt)("li",{parentName:"ol"},"Repeat the previous two steps for x86_64.")),(0,a.kt)("h3",{id:"deliverables"},"Deliverables"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Complete the lab section, above."),(0,a.kt)("li",{parentName:"ol"},"Blog about the programs you've written. Describe the experience of writing and debugging in assembler, as compared to writing in other languages. Contrast x86_64 and aarch64 assembler, your experience with each, and your opinions of each. Include links to the source code for each of your assembler programs.")),(0,a.kt)("h3",{id:"optional-challenge"},"Optional Challenge"),(0,a.kt)("p",null,'Write a program in aarch64 assembly language to print the times tables from 1-12 ("1 x 1 = 1" through "12 x 12 = 144"). Add a spacer between each table, and use a function/subroutine to format the numbers with leading-zero suppression.'),(0,a.kt)("p",null,"The output could look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-assembly"}," 1 x  1 =   1\n 2 x  1 =   2\n 3 x  1 =   3\n 4 x  1 =   4\n 5 x  1 =   5\n 6 x  1 =   6\n 7 x  1 =   7\n 8 x  1 =   8\n 9 x  1 =   9\n10 x  1 =  10\n11 x  1 =  11\n12 x  1 =  12\n-------------\n 1 x  2 =   2\n 2 x  2 =   4\n 3 x  2 =   6\n 4 x  2 =   8\n 5 x  2 =  10\n\n  ...lines snipped for space... \n\n11 x 12 = 132\n-------------\n 1 x 12 =  12\n 2 x 12 =  24\n 3 x 12 =  36\n 4 x 12 =  48\n 5 x 12 =  60\n 6 x 12 =  72\n 7 x 12 =  84\n 8 x 12 =  96\n 9 x 12 = 108\n10 x 12 = 120\n11 x 12 = 132\n12 x 12 = 144\n")))}u.isMDXComponent=!0}}]);