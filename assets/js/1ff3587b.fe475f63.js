"use strict";(self.webpackChunkSPO600=self.webpackChunkSPO600||[]).push([[5878],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),c=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(o,".").concat(d)]||m[d]||p[d]||r;return n?i.createElement(f,s(s({ref:t},u),{},{components:n})):i.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9946:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return c}});var i=n(3117),a=(n(7294),n(3905));const r={id:"week8-class2",title:"Week 8 - Class 2",sidebar_position:16,description:"Week 8 - Class 2"},s="Week 8 - Class II",l={unversionedId:"A-Classes/week8-class2",id:"A-Classes/week8-class2",title:"Week 8 - Class 2",description:"Week 8 - Class 2",source:"@site/docs/A-Classes/week8-class2.md",sourceDirName:"A-Classes",slug:"/A-Classes/week8-class2",permalink:"/SPO600/A-Classes/week8-class2",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/SPO600/tree/main/docs/A-Classes/week8-class2.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{id:"week8-class2",title:"Week 8 - Class 2",sidebar_position:16,description:"Week 8 - Class 2"},sidebar:"courseNotesSidebar",previous:{title:"Week 8 - Class 1",permalink:"/SPO600/A-Classes/week8-class1"},next:{title:"Week 9 - Class 1",permalink:"/SPO600/A-Classes/week9-class1"}},o={},c=[{value:"Scalable Vector Extensions (SVE/SVE2) via Inline Assembler and C Intrinsics",id:"scalable-vector-extensions-svesve2-via-inline-assembler-and-c-intrinsics",level:2},{value:"Video",id:"video",level:2},{value:"Reading",id:"reading",level:2},{value:"SVE2 Demonstration",id:"sve2-demonstration",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"week-8---class-ii"},"Week 8 - Class II"),(0,a.kt)("h2",{id:"scalable-vector-extensions-svesve2-via-inline-assembler-and-c-intrinsics"},"Scalable Vector Extensions (SVE/SVE2) via Inline Assembler and C Intrinsics"),(0,a.kt)("h2",{id:"video"},"Video"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://web.microsoftstream.com/video/a6b892e4-b408-4bc7-9fc1-d78e4efb8e0e"},"SVE & SVE2 - Edited Summary Video"))),(0,a.kt)("h2",{id:"reading"},"Reading"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/SPO600/H-ARM/sve2"},"SVE2"))),(0,a.kt)("h2",{id:"sve2-demonstration"},"SVE2 Demonstration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Code available here: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ctyler/sve2-test"},"https://github.com/ctyler/sve2-test"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"You can clone this to israel.cdot.systems with: ",(0,a.kt)("inlineCode",{parentName:"li"},"git clone https://github.com/ctyler/sve2-test.git")))),(0,a.kt)("li",{parentName:"ul"},"This is an implementation of a very simple program which takes an image file, adjusts the red/green/blue channels of that file, and then writes an output file. Each channel is adjusted by a factor in the range 0.0 to 2.0 (with saturation)."),(0,a.kt)("li",{parentName:"ul"},"The image adjustment is performed in the function ",(0,a.kt)("inlineCode",{parentName:"li"},"adjust_channels()")," in the file ",(0,a.kt)("inlineCode",{parentName:"li"},"adjust_channels.c"),". There are three implementations:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"A basic (naive) implementation in C. Although this is a very basic implementation, it is potentially subject to autovectorization."),(0,a.kt)("li",{parentName:"ol"},"An implementation using inline assembler for SVE2 with strucure loads."),(0,a.kt)("li",{parentName:"ol"},"An implementation using inline assembler for SVE2 with an interleaved factor table."),(0,a.kt)("li",{parentName:"ol"},"An implementation using ACLE compile intrinsics."))),(0,a.kt)("li",{parentName:"ul"},"The implementation built is dependent on the value of the ADJUST","_","CHANNEL","_","IMPLEMENTATION macro."),(0,a.kt)("li",{parentName:"ul"},"The provided Makefile will build four versions of the binary -- one using each of the four implementations -- and it will run through 3 tests with each binary. The tests use the input image file ",(0,a.kt)("inlineCode",{parentName:"li"},"tests/input/bree.jpg")," (a picture of a cat) and place the output in the files ",(0,a.kt)("inlineCode",{parentName:"li"},"tests/output/bree[1234][abc].jpg"),". The output files are processed with adjustment factors of 0.5/0.5/0.5, 1.0/1.0/1.0, and 2.0/2.0/2.0."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Please examine, build, and test the code, compare the implementations, and note how it works - there are extensive comments in the code, especially for implementation 2.")),(0,a.kt)("li",{parentName:"ul"},"Your observations about the code might make a good blog post!")))}p.isMDXComponent=!0}}]);